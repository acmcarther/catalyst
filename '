pub use self::pull_requests::PullRequest;

mod pull_request {
  use hyper::Client;
  use hyper::header::{Authorization};

  pub type Owner = String;
  pub type User = String;
  pub type Repo = String;
  pub type Branch = String;
  pub type PullRequestId = u32;
  pub type PullRequestTitle = String;
  pub type IssueId = u32;
  pub type Message = String;
  pub type Sha = String;
  pub type Url = String;

  pub enum PullRequestState {
    Open,
    Closed
  }

  pub enum PullRequestStateQuery {
    State(PullRequestState),
    All
  }

  pub enum PullRequestDirection {
    Ascending,
    Descending,
  }

  pub enum PullRequestSortables {
    CreatedAt,
    UpdatedAt,
    CommentCount,
    LongRunning,
  }

  pub struct PullRequestQuery {
    state: Option<PullRequestStateQuery>,
    user: Option<User>,
    branch_name: Option<Branch>,
    sort_by: Option<PullRequestSortables>,
    sort_direction: Option<SortDirection>,
    base_branch: Option<Branch>,
  }

  pub struct PullRequestHead {
    user: Option<User>,
    branch: Branch
  }

  pub struct PullRequestUpdate {
    title: Option<PullRequestTitle>,
    body: Option<Message>,
    state: Option<PullRequestState>
  }

  pub struct MergeRequest {
    commit_message: Option<Message>,
    sha: Option<Sha>
  }

  pub enum MergeFailure {
    NotPossible,
    ShaDidNotMatch,
  }

  pub enum MergedResult {
    Success { sha: Sha, message: Message },
    Failure { failureType: MergeFailure, message: Message, documentation_url: Url }
  }

  // TODO: Build this out with all of the data
  pub struct PullRequest {
    id: PullRequestId
  }

  // TODO: Build this out with all of the data
  pub struct CreatedPullRequest {
    id: PullRequestId
  }

  pub trait PullRequester {
    fn list(owner: Owner, repo: Repo, query: Option<PullRquestQuery>) -> Result<Vec<PullRequest>, RequestErr>;
    fn get(owner: Owner, repo: Repo, pr_id: PullRequestId) -> Result<PullRequest, RequestErr>;
    fn create_raw(owner: Owner, repo: Repo, title: PullRequestTitle, head: PullRequestHead, base: Branch, message: Message) -> Result<CreatedPullRequest, RequestErr>;
    fn create_from_issue(owner: Owner, repo: Repo, head: PullRequestHead, base: Branch, issue: IssueId) -> Result<CreatedPullRequest, RequestErr>;
    fn update_pull_request(owner: Owner, repo: Repo, pull_request_id: PullRequestId, update: PullRequestUpdate) -> Result<UpdatedPullRequest, RequestErr>;
    fn list_commits(owner: Owner, repo: Repo, pull_request_id: PullRequestId) -> Result<Vec<PullRequestCommits>, RequestErr>;
    fn list_files(owner: Owner, repo: Repo, pull_request_id: PullRequestId) -> Result<Vec<PullRequestFiles>, RequestErr>;
    fn get_merged(owner: Owner, repo: Repo, pull_request_id: PullRequestId) -> Result<MergedStatus, RequestErr>;
    fn merge(owner: Owner, repo: Repo, pull_request_id: PullRequestId, mergeRequest: Option<MergeRequest>) -> Result<MergedResult, RequestErr>;
  }

  pub struct GithubClient<T> {
    client: Client,
    token: Option<Authorization<T>>
  }
}
